Отлично, подготовлю подробный и структурированный материал для страницы «Инструменты тестирования». Включу как онлайн-валидаторы и расширения для браузеров, так и коммерческие и бесплатные решения, а также отдельный раздел для ассистивных технологий с упором на скринридеры.

Соберу для каждого инструмента: описание, функциональность, пошаговое руководство с изображениями (если есть), ссылки на скачивание, и рекомендации по применению.

Сообщу, как только всё будет готово!


# Инструменты тестирования

Полноценное тестирование доступности требует сочетания автоматизированных проверок и ручного тестирования. Автоматические инструменты помогают быстро найти типовые ошибки (по оценкам, до 30% всех дефектов доступности), но не выявляют всех проблем. Поэтому после их использования необходимо проводить ручное тестирование, в том числе с помощью вспомогательных технологий (например, скринридеров). Ниже представлены основные инструменты для проверки доступности: онлайн-валидаторы, расширения для браузеров, а также вспомогательные технологии для тестирования вручную.

## Онлайн-валидаторы и автоматические инструменты

Онлайн-валидаторы позволяют проверить код и содержимое страниц на соответствие стандартам и выявить потенциальные проблемы доступности без установки дополнительного ПО. Их удобно использовать на ранних этапах, до привлечения пользователей и специализированных тестировщиков. Вот ключевые инструменты:

* **W3C HTML Validator** – официальный валидатор разметки HTML/XHTML от World Wide Web Consortium. Проверяет страницу на правильность HTML-разметки и соответствие спецификации (Document Type Definition). Это бесплатный сервис, позволяющий найти незакрытые теги, неправильную вложенность и другие ошибки кода. Валидатор поможет улучшить техническое качество страниц и избежать проблем, которые могут мешать работе assistive technologies. *Ссылка:* [validator.w3.org](https://validator.w3.org/).

* **W3C CSS Validator** – аналогичный сервис для проверки таблиц стилей (CSS) на ошибки. Он анализирует подключённые CSS-файлы или стили в коде страницы и сверяет их с текущими стандартами CSS. Например, инструмент укажет на опечатки в свойствах или недопустимые значения, что косвенно способствует доступности (корректно написанные стили не будут приводить к непредвидённым ошибкам отображения). *Ссылка:* [jigsaw.w3.org/css-validator](https://jigsaw.w3.org/css-validator/).

* **WAVE Web Accessibility Evaluation Tool (онлайн версия)** – один из самых популярных бесплатных инструментов автоматической проверки доступности веб-страниц. Разработан организацией WebAIM. WAVE анализирует указанную страницу на соответствие принципам доступности (WCAG) и визуально выделяет найденные проблемы прямо на странице. Для использования веб-сервиса достаточно ввести URL страницы на сайте WAVE. WAVE отмечает цветными иконками разные элементы:

  * **Ошибки (красные значки)** – явные нарушения доступности, требующие исправления (например, отсутствие текста `alt` у изображения).
  * **Предупреждения (жёлтые значки)** – потенциальные проблемы или недочёты, требующие внимания (например, пропуск уровня заголовка).
  * **Особенности (зелёные значки)** – правильные элементы, улучшающие доступность (например, обнаружены корректные подписи к полям).
  * **Структура (синие значки)** – обозначение семантической структуры страницы (заголовки, списки, основные области).
  * **ARIA (фиолетовые значки)** – подсказки по использованию атрибутов ARIA, выявление их наличия или ошибок применения.

  При клике на значок WAVE вносит пояснения в боковой панели: описание проблемы, рекомендации по исправлению и ссылки на соответствующие критерии WCAG 2.1. WAVE также предоставляет функцию проверки цветового контраста: интегрированный инструмент показывает контраст текста и фона и предупреждает о несоответствии стандарту. **Важно:** WAVE можно использовать и в виде расширения для браузера (см. ниже), что особенно удобно для проверки закрытых или динамических страниц.

* **Tenon.io** – многофункциональный сервис автоматизированного тестирования доступности, доступный в бесплатной и платной версиях. Tenon предлагает браузерное расширение и API. Инструмент генерирует подробные отчёты с фрагментами кода, указанием ошибок и ссылками на руководства по доступности. Tenon может обнаруживать распространённые сценарии, приводящие к критическим ошибкам, и даже предупреждать о потенциальных проблемах на ранних этапах разработки. Благодаря гибкому API Tenon интегрируется в системы управления контентом (CMS), процессы CI/CD и другие среды разработки. *Примечание:* полная функциональность Tenon доступна в платной версии, поэтому для базовых проверок можно воспользоваться бесплатным режимом или альтернативными бесплатными инструментами.

* **Проверка цветового контраста.** Недостаточный контраст текста – одна из самых частых проблем доступности, за последний год обнаружена на 86% главных страниц сайтов. Для проверки сочетаний цветов существуют отдельные инструменты:

  * *WebAIM Contrast Checker* – простой онлайн-калькулятор контрастности от WebAIM. Позволяет ввести цвет текста и фона (в HEX или RGB) и показывает коэффициент контрастности и соответствие уровням WCAG (AA/AAA).
  * *Are My Colors Accessible* – интерактивный веб-сервис для оценки доступности цветовой палитры. В базовом режиме рассчитывает контраст между двумя заданными цветами, учитывая размер и начертание шрифта. В «Palette Mode» можно сразу проверить все цвета палитры друг с другом: сервис наглядно помечает пары цветов как пригодные (“Yup”), условно пригодные (“Kinda”) или непригодные (“Nope”) для малого или большого текста, указывая конкретный коэффициент контрастности. Ниже приведён пример вывода для набора цветов:

  &#x20;*Пример анализа палитры в инструменте Are My Colors Accessible: показано сочетание нескольких цветов с расчетом контрастности (числовые значения) и отметкой “Yup/Nope” в зависимости от соответствия требованиям для мелкого и крупного текста.*

  * *Color Contrast Analyser* – настольное приложение (Windows/Mac) от TPG Interactive. Оно позволяет замерять контраст напрямую с экрана с помощью пипетки или по введённым значениям и определяет соответствие уровням WCAG 2.1.
  * *Stark* – расширение для браузеров (Chrome, Figma и пр.), которое, помимо расчёта контраста, умеет симулировать различные виды цветовой слепоты на странице. Это помогает проверить восприятие цветов пользователями с нарушениями цветоразличения.

  При подборе цветовой гаммы рекомендуется заранее удостовериться в достаточности контраста, чтобы избежать серьезных переделок дизайна позже. Используя указанные инструменты, разработчики и дизайнеры могут итеративно улучшать палитру (например, регулируя яркость/насыщенность цветов, как позволяет делать Are My Colors Accessible) и сразу видеть влияние на соответствие стандартам.

## Расширения для браузеров и встроенные инструменты

Расширения для браузеров интегрируются в привычную среду разработки и позволяют оперативно проверять доступность непосредственно на просматриваемой странице. Большинство из них дополняют встроенные **DevTools** браузера или работают через удобный интерфейс. Такие инструменты выявляют проблемы на уже отрендеренной странице (с учётом динамического контента и скриптов). Рассмотрим основные расширения и встроенные возможности:

* **WAVE (расширение для Chrome, Firefox, Edge).** Расширение WAVE от WebAIM позволяет запустить проверку доступности текущей страницы одним кликом прямо в браузере. После установки добавляется значок WAVE в панель инструментов. **Как использовать:** зайдите на любую страницу и нажмите значок WAVE – поверх страницы сразу появятся цветные иконки, обозначающие ошибки, предупреждения и важные элементы, а сбоку откроется панель с сводкой результатов. В боковой панели вкладка **Summary** показывает общее количество ошибок, предупреждений и пр., а другие вкладки (**Details, Structure, Contrast** и т.д.) дают подробную информацию. Например, на вкладке *Structure* можно увидеть структуру заголовков и основных областей страницы для проверки семантики.

  &#x20;*Интерфейс расширения WAVE: боковая панель «Structure» отображает структурные элементы страницы (область header, навигация, основной контент с заголовками h1/h2 и т.д.), что помогает удостовериться в правильной семантической разметке.*

  При клике на конкретную иконку на странице WAVE покажет пояснение проблемы и советы по устранению, а также подсветит соответствующий фрагмент кода (на вкладке *Code* внизу). Можно временно отключить стили страницы (переключатель *Styles: On/Off*), чтобы увидеть страницу в упрощённом виде – это помогает, например, проверить порядок обхода содержимого с клавиатуры и скринридеров без влияния CSS. Расширение WAVE особенно полезно для тестирования страниц, требующих авторизации, или динамически изменяющихся интерфейсов, поскольку анализ идет непосредственно в браузере пользователя.

* **axe DevTools.** Расширение **axe** от компании Deque Systems – мощный автоматизированный сканер, интегрируемый в инструменты разработчика. После установки оно добавляет вкладку «**axe DevTools**» в панель DevTools (F12) браузера Chrome или Firefox. **Как использовать:** откройте DevTools (например, правой кнопкой «Inspect» или F12), выберите вкладку *axe DevTools*, затем нажмите кнопку *“Scan all of my page”* для запуска проверки. Axe просканирует текущую страницу и выдаст список найденных нарушений со ссылками на описание каждого (правила основаны на стандарте WCAG).

  Особенности axe DevTools:

  * Полностью **open source** библиотека (axe-core), на которой основано расширение. Многие другие инструменты используют эту библиотеку, поэтому результаты axe часто пересекаются с ними.
  * **Настраиваемость:** можно добавлять свои правила проверки или интегрировать движок axe в автоматизированные тесты, CI/CD и др. (axe доступен как фреймворк для JavaScript и API).
  * **Приоритизация проблем:** в отчёте axe указывает уровень критичности каждой проблемы (Critical, Serious, Moderate, Minor) и поддерживает фильтрацию результатов.
  * **Intelligent Guided Tests:** расширение предлагает полуавтоматические *guided tests* для выявления проблем, которые не находятся полностью автоматически. Например, axe может попросить вручную проверить определённый элемент или выполнить действие, чтобы затем зафиксировать результат – так обнаруживается больше тонких проблем доступности.
  * **Экспорт отчётов:** результаты сканирования можно сохранять и экспортировать для совместной работы в команде или отслеживания прогресса исправлений.

  Ниже показан пример интерфейса axe DevTools с результатами проверки страницы:

  &#x20;*Пример отчёта axe DevTools во вкладке DevTools: вверху – сводка (обнаружено 7 проблем, соответствие WCAG 2.1 AA), ниже – перечень выявленных нарушений с кратким описанием («Links must be distinguishable without relying on color», «Links must have discernible text» и т.д.).*

  В целом, axe DevTools – один из самых популярных инструментов автоматизированного аудита доступности, помогающий разработчикам быстро находить и исправлять проблемы непосредственно в процессе разработки.

* **Accessibility Insights** – бесплатный инструмент от Microsoft для комплексного тестирования доступности. Доступен в нескольких вариантах: приложение для **Windows**, приложение для **Android** и расширение для **браузера Chrome/Edge**. Insights также основан на библиотеке axe-core, но обладает дополнительными функциями:

  * В режиме **Fast Pass** выполняется быстрая автоматическая проверка страницы на основные ошибки (аналогично axe).
  * Режим **Assessment (Оценка)** в браузерном расширении предоставляет полный пошаговый сценарий тестирования, объединяющий автоматические, полуавтоматические и ручные проверки. В ходе Assessment инструмент последовательно проводит серию тестов (например, проверка навигации с клавиатуры, фокуса, читаемости текста и т.д.), часть из которых требует участия тестировщика (отвечать на вопросы или выполнять указанные действия). Такой подход позволяет получить максимально полный отчёт об ошибках, включая те, которые чисто автоматическими средствами не обнаружить.
  * Удобный **эксплорер** структуры: во всех версиях Insights есть режим просмотра структуры страницы и информации о каждом элементе – его роли, названии (accessible name), состоянии, и т.д., что облегчает анализ проблем на конкретном элементе.
  * **Кроссплатформенность:** помимо расширения для веб, Accessibility Insights for Windows позволяет тестировать настольные приложения и веб-контент под Windows (включая проверки, специфичные для Windows-приложений), а Insights for Android – анализировать доступность мобильных приложений на Android. Это делает инструмент полезным не только для веб, но и для общих задачAccessibility-тестирования.

  *Ссылки:* можно скачать [Accessibility Insights for Windows](https://accessibilityinsights.io/downloads/) или установить [Accessibility Insights for Web](https://accessibilityinsights.io) как расширение. Важно отметить, что инструмент бесплатен и с открытым исходным кодом.

* **Siteimprove Accessibility Checker.** Бесплатное расширение для Chrome от компании Siteimprove. После запуска, подобно WAVE, открывает боковую панель с перечнем обнаруженных проблем на странице. Особенность Siteimprove – удобная фильтрация результатов: можно отфильтровать ошибки по уровню соответствия (A/AA/AAA), по серьёзности (ошибка/предупреждение) и по ответственности (например, отдельно проблемы в контенте vs в коде). Фильтрация по критичности помогает сфокусироваться на действительно важных проблемах, поскольку автоматические сканеры иногда выдают ложноположительные срабатывания. В списке проблем Siteimprove для каждой даёт краткое описание и рекомендации, разделяя нарушения стандартов доступности и проблемы удобства использования. Полная платформа Siteimprove – коммерческий продукт для комплексного мониторинга доступности сайта, но само расширение можно использовать бесплатно.

* **Google Lighthouse.** Lighthouse – это встроенный инструмент аудита от Google, доступный в Chrome и других браузерах на базе Chromium. Изначально предназначен для оценки производительности и SEO, Lighthouse также включает модуль проверки доступности. **Как запустить:** открыть панель разработчика Chrome (F12) и перейти во вкладку «Lighthouse» (или «Аудиты» в старых версиях). Выбрать чекбокс **Accessibility** и нажать «Generate report» – Lighthouse просканирует страницу и сформирует отчёт. Lighthouse выявляет, например, отсутсвующие атрибуты alt у изображений, неподписанные кнопки, проблемы с фокусом, структуру заголовков и т.д.. Отчёт показывает процент выполнения критериев доступности и списки ошибок с пояснениями. Преимущества Lighthouse:

  * Интегрирован в Chrome, не требует установки (open source проект).
  * Удобный формат отчёта, который можно сохранить как файл (JSON или HTML) для отслеживания прогресса.
  * Помимо доступности, одним запуском можно проверить и другие аспекты (производительность, лучшие практики, SEO), что полезно для комплексной оценки сайта.

  Lighthouse использует часть правил из движка **axe**, поэтому его вывод по доступности перекликается с результатами axe DevTools. Если вы уже добились нулевых ошибок в axe, то проверка Lighthouse, как правило, не найдёт ничего нового. Однако Lighthouse удобен для быстрых одиночных проверок или когда нет возможности установить расширения.

* **Инспекторы доступности в DevTools.** Современные браузеры имеют встроенные средства для анализа доступности:

  * *Chrome.* В панели Elements (Элементы) Chrome есть вкладка **Accessibility** (появляется при выборе элемента в DOM). Она показывает роль выбранного элемента, его доступное имя (Accessible Name), состояние и прочие свойства accessibility API. Также при наведении на элемент в HTML-дереве Chrome в всплывающей подсказке отображается текущий уровень контрастности текста этого элемента и предупреждение, если контраст недостаточен. Таким образом, разработчик может прямо в инструментах разработчика увидеть, имеет ли элемент правильную семантику и имя для скринридеров, и соответствуют ли цвета требованиям.
  * *Firefox.* В **Firefox DevTools** есть отдельная вкладка **Accessibility** (может потребоваться включить её в настройках DevTools). Инспектор доступности Firefox предоставляет дерево Accessibility Tree, отображающее все узлы, доступные скринридерам. Выбрав любой узел, можно увидеть подробности: роль, имя, подсказку, состояние, связанные действия и т.д.. Firefox также умеет автоматически выявлять некоторые проблемы – например, подсвечивать узлы без текстового имени или с плохим контрастом (в панели есть специальный чекер текстовых меток и контраста). Эти возможности помогают разработчикам отлаживать семантику прямо в процессе разработки. Firefox Accessibility Inspector работает на основе тех же Accessibility API, что и скринридеры, поэтому отображает **реальное дерево доступности**, которое видят вспомогательные технологии.
  * *Edge.* Браузер Microsoft Edge в целом наследует возможности Chromium (Lighthouse, панель Accessibility), а также имеет интеграцию с Narrator (экранным диктором Windows) для тестирования.

  Использование встроенных DevTools-инспекторов особенно полезно для точечной проверки отдельных элементов и случаев, когда нужно понять, почему скринридер читает элемент определённым образом. Они дополняют автоматические сканеры, предоставляя «сырой» взгляд на представление страницы для вспомогательных технологий.

## Тестирование с помощью вспомогательных технологий

Ни один автоматический инструмент не гарантирует полной проверки доступности, поэтому критически важно проводить тесты вручную – так, как будут взаимодействовать с сайтом люди с инвалидностью. К основным методам относятся навигация **с клавиатуры** и использование **вспомогательных технологий**, прежде всего экранных считывателей (скринридеров). Ручное тестирование выявляет гораздо больше проблем, чем автоматическое. Ниже мы рассмотрим, как и чем тестировать доступность вручную.

**Навигация с клавиатуры.** Первый шаг – проверить, можно ли полноценно пользоваться сайтом без мыши, только с клавиатуры. Попробуйте перемещаться по интерактивным элементам с помощью клавиши <kbd>Tab</kbd> (и <kbd>Shift + Tab</kbd> назад), активировать ссылки и кнопки клавишей <kbd>Enter</kbd>, прокручивать страницу стрелками или пробелом. Убедитесь, что:

* Фокус последовательно переходит по **всем интерактивным элементам**, виден и не исчезает из видимой области.
* Можно заполнить и отправить формы с клавиатуры, открывать выпадающие меню, диалоги и т.д.
* Нет участков страницы, куда невозможно попасть или застрять (так называемые «trap» – ловушки фокуса).
* Выполняются требования по порядку обхода и логической последовательности содержимого.

Проблемы, обнаруженные на этом этапе (например, отсутствующий `outline` у фокусных элементов, нестандартное поведение скриптов при фокусе), нужно устранить до тестирования со скринридером. Клавиатурная навигация выгодна всем пользователям, не только тем, кто пользуется ассистивными технологиями.

**Экранные читатели (скринридеры).** Скринридер – это программа, которая озвучивает или отображает на брайлевском дисплее содержание экрана для слепых и слабовидящих пользователей. Тестирование сайта с помощью скринридера позволяет услышать сайт «ушами» пользователя и проверить, насколько контент понятен без визуального контекста. Существует несколько популярных скринридеров для разных платформ:

* **NVDA** (Windows) – бесплатный экранный читатель с открытым кодом, один из самых популярных на Windows.
* **JAWS** (Windows) – коммерческий скринридер от Freedom Scientific, распространён в корпоративной среде. Требует платной лицензии (около \$90 в год).
* **Narrator** (Windows) – встроенный экранный диктор Windows. Имеет базовый функционал, используется в основном для начального ознакомления или если нет других программ.
* **VoiceOver** (macOS и iOS) – встроенный скринридер Apple. Активируется на Mac сочетанием <kbd>Cmd + F5</kbd> (или тройным нажатием Touch ID на новых моделях), на iPhone/iPad – тройным нажатием кнопки Домой/Питания. Очень функционален, на Mac предпочтительно работать с браузером Safari.
* **TalkBack** (Android) – встроенный сервис озвучивания на Android-устройствах. Включается в настройках доступности (либо сочетанием кнопок громкости на некоторых устройствах). Позволяет слепым пользователям пользоваться смартфоном посредством жестов.
* **Orca** (Linux) – экранный читатель для сред GNOME/Linux, обычно предустановлен в популярных дистрибутивах.
* **ChromeVox** (Chrome OS) – встроенный в Chromebooks скринридер; также доступен как расширение Chrome для десктопа.

*Совет:* ориентируйтесь на самые популярные сочетания скринридер+браузер для вашей аудитории. По международным опросам WebAIM и локальным исследованиям, чаще всего используются связки **JAWS + Chrome**, **NVDA + Firefox/Chrome**, **VoiceOver + Safari**, **TalkBack + Chrome**. Поэтому минимум имеет смысл протестировать: (1) ваш сайт с **NVDA** в браузере Chrome или Firefox, (2) на мобильном устройстве с **TalkBack** (Android) или **VoiceOver** (iPhone).

Ниже приведены рекомендации по началу работы с экранными читателями для тестирования веб-контента:

* **Тестирование с NVDA (Windows).** Скачайте NVDA с официального сайта (nvaccess.org) и установите. NVDA запускается сочетанием <kbd>Ctrl + Alt + N</kbd> (по умолчанию). При первом запуске появится окно приветствия NVDA, где можно настроить раскладку клавиатуры и другие параметры:

  &#x20;*Приветственное окно NVDA (первый запуск): выбор раскладки клавиатуры «laptop» или «desktop», опция использования CapsLock в качестве клавиши-модификатора NVDA, автозапуск при входе и пр. Для большинства пользователей рекомендуется раскладка Desktop и включение использования CapsLock как NVDA-Modifier – это позволит удобнее жать сочетания одной рукой.*

  **Управление:** NVDA перехватывает ввод с клавиатуры и озвучивает элементы в фокусе. Существует два основных режима:

  * *Режим фокуса* – NVDA читает только активный элемент (фокус) и реагирует на ввод (нажатие Enter, пробел и т.п.) как обычно.
  * *Режим обзора (browse mode)* – NVDA позволяет стрелками **↑/↓** читать всю страницу последовательно, как текст, даже нефокусируемые элементы. Для активации режима обзора нужно переключиться на содержимое страницы (обычно NVDA делает это автоматически при загрузке страницы). В режиме обзора многие клавиши управляют навигацией по странице, а не браузером.

  **Важные клавиши и команды NVDA:**

  * **NVDA-модификатор** – специальная клавиша, используемая в сочетаниях. По умолчанию это <kbd>Insert</kbd> (NumPad Insert или основной Insert). В настройках можно сделать CapsLock модификатором. Далее обозначим эту клавишу как **NVDA**.
  * <kbd>NVDA + Q</kbd> – выключить NVDA (полностью выйти из программы).
  * <kbd>Ctrl</kbd> – мгновенно **остановить речь** (полезно, если скринридер зачитал лишнее или слишком долго).
  * <kbd>H</kbd> – перейти к следующему заголовку на странице; <kbd>Shift + H</kbd> – к предыдущему заголовку. Аналогично существуют одно-буквенные команды для других элементов: <kbd>K</kbd> для ссылок, <kbd>B</kbd> для кнопок, <kbd>List</kbd> (L) для списков и т.д.
  * <kbd>NVDA + F7</kbd> – открыть диалог **Elements List** (список всех ссылок, заголовков или ориентиров страницы на выбор) – удобный способ оценить структуру страницы и доступность навигации.
  * <kbd>NVDA + N</kbd> – открыть меню NVDA. Отсюда можно попасть в настройки (Preferences) и утилиты. *Полезно для тестировщиков:* в меню **Tools** есть инструмент **Speech Viewer** – окно, отображающее весь произносимый текст. Включите его, чтобы видеть, что “слышит” пользователь (это помогает, если вы тестируете зрячим и не полностью полагаетесь на слух).
  * <kbd>NVDA + F12</kbd> – прочитать текущее время (не относится к веб-доступности, но полезно знать, что скринридер имеет и такие команды).

  После запуска NVDA переключитесь в окно браузера и попробуйте навигацию с помощью <kbd>Tab</kbd> (режим фокуса) и стрелок вверх/вниз (режим обзора). Проверьте, как озвучиваются:

  * Заголовки страниц и секций (NVDA должен сообщать уровень заголовка).
  * Альтернативный текст изображений – скринридер прочитает `alt` или скажет "графика без названия", если атрибут пуст или отсутствует.
  * Подписи к полям форм, текущее положение в группах радио-кнопок, состояние флажков (отмечен/не отмечен).
  * Текст ссылок – убедитесь, что ссылки понятны вне контекста (избегайте общего текста вроде "узнать больше" без указания, о чём именно).
  * Таблицы – NVDA озвучивает заголовки столбцов/строк (если помечены семантикой `<th scope>` или атрибутами ARIA).
  * Динамические изменения контента – NVDA озвучивает ли всплывающие сообщения, обновления на странице (при правильной разметке через ARIA Live Regions).

  **Примечание:** большинство пользователей NVDA используют его на скорости речи гораздо выше стандартной, и с отключенными избыточными подсказками. Для тестирования можно ускорять речь (NVDA + ↑/↓ меняет скорость) и пробовать воспринимать более быстрый вывод – это даст представление, как опытный пользователь услышит ваш сайт.

* **Тестирование с JAWS (Windows).** Если у вас есть доступ к JAWS (или демо-версия), стоит протестировать сайт и в нём, поскольку JAWS интерпретирует некоторые вещи иначе, чем NVDA. JAWS – коммерческий скринридер, но широко используемый в профессиональной среде. Основные команды навигации схожи с NVDA (хотя есть отличия в клавишах и терминологии). Важное отличие: JAWS по умолчанию работает в связке с браузером **Chrome** или **Internet Explorer/Edge** (в Firefox поддержка чуть менее оптимальна). При тестировании в JAWS обратите внимание на:

  * Озвучивание элементов форм и таблиц – JAWS может давать более подробные подсказки автоматически.
  * Совместимость с ARIA – некоторые конструкции, работавшие в NVDA, могут иметь нюансы в JAWS, и наоборот.
  * Производительность – на тяжёлых страницах JAWS может вести себя медленнее.

  Поскольку JAWS платный, рекомендуется вначале тестировать с NVDA (бесплатно), и только для окончательной проверки привлекать JAWS (например, воспользовавшись 40-минутной демо-сессией, которая сбрасывается перезагрузкой, или через сервисы в облаке – см. ниже).

* **Тестирование с VoiceOver (Mac).** На компьютерах Mac скринридер VoiceOver включается сочетанием <kbd>Cmd + F5</kbd>. При активном VoiceOver для управления используются так называемые *VO-клавиши* – по умолчанию это <kbd>Ctrl + Option</kbd> (их можно заменить на CapsLock). Удерживая VO-клавиши, используйте стрелки для навигации: **VO + →/←** – переход к следующему/предыдущему элементу (по доступибильному дереву, включая нефокусируемые элементы), **VO + Space** – активация элемента (нажатие кнопки, ссылки), **VO + ↑/↓** – переключение уровней взаимодействия. VoiceOver имеет концепцию *режима взаимодействия*: если вы попали на группу элементов (например, список или панель инструментов), нужно нажать **VO + Shift + ↓**, чтобы «погрузиться» внутрь этого контейнера и стрелками перемещаться по его содержимому. После окончания – **VO + Shift + ↑** чтобы выйти из контейнера назад.

  В Safari VoiceOver читает веб-страницы достаточно подробно, озвучивая роли элементов, альтернативный текст, группы элементов и т.д. Убедитесь, что:

  * VoiceOver правильно объявляет каждую страницу (например, сразу читает заголовок страницы при загрузке).
  * Навигация по заголовкам (VO + Cmd + H, или через роотор VoiceOver) показывает логичную структуру.
  * Нет элементов, которые остаются «немыми» (например, изображение без alt будет озвучено как «изображение» или с названием файла – что плохо).

  VoiceOver также предоставляет удобный **Ротор** – меню быстрого доступа к различным видам элементов на странице (заголовкам, ссылкам, ориентирам, виджетам). Он вызывается жестом вращения (на трекпаде) или клавишами VO + U. Проверьте в Роторе, все ли заголовки и ориентиры страницы представлены и понятны по названиям.

* **Тестирование на мобильных устройствах.** Обязательно проверьте хотя бы ключевые сценарии на смартфоне с включённым TalkBack (Android) или VoiceOver (iOS). Управление там отличается (используются жесты: свайпы, двойной тап для активации). Например, в TalkBack основной жест – свайп вправо/влево для перехода к следующему/предыдущему элементу, двойной тап – активация, свайп вниз-вверх – смена режима навигации (по символам, словам, заголовкам и т.п.). В **VoiceOver на iPhone** похожие жесты: свайп вправо/влево перемещает фокус, двойной тап – активация, вращение двумя пальцами (родстер) меняет категории элементов для навигации. Проверьте:

  * Корректность порядка фокуса на мобильной версии (если контент отличается от десктопа).
  * Удобство использования основных функций (меню, форма, навигация) с жестами.
  * Отсутствие конфликтов с мобильными боковыми панелями, всплывающими окнами и пр. (скринридеры на мобильных иногда фокусируются на скрытых меню, если разработка выполнена некорректно).

**Другие вспомогательные технологии.** Помимо скринридеров, существуют и другие средства, которые стоит учитывать при тестировании:

* Пользователи с **слабым зрением** нередко применяют экранные лупы. Например, системные лупы: *Zoom* в macOS или *Magnifier* в Windows, которые увеличивают часть экрана. Некоторые используют их вместе со скринридером (одновременно слушают и рассматривают увеличенный фрагмент страницы). При тестировании убедитесь, что при масштабировании интерфейс не теряет функциональности: элементы не наезжают друг на друга, текст читаем, важный контент не оказывается за пределами видимой области без возможности прокрутки. Попробуйте в браузере увеличить масштаб до 200% и проверить ключевые страницы (это требование WCAG 1.4.4).
* **Высокий контраст.** Пользователи с нарушениями зрения могут включать режимы высокого контраста (например, Windows High Contrast) или особые цветовые схемы. Контент сайта должен оставаться различимым. Проверить это можно с помощью эмуляторов или вручную, включив режимы ОС.
* **Управление голосом.** Люди с моторными нарушениями пользуются программами распознавания речи, такими как Dragon NaturallySpeaking, либо встроенными голосовыми ассистентами (Siri, Google Assistant для некоторых задач). Они могут открывать ссылки и нажимать кнопки, произнося их названия. Поэтому убедитесь, что у интерактивных элементов понятные текстовые метки. В Windows 10+ есть функция Voice Control, позволяющая навигировать по интерфейсу голосом (она распознаёт также **цифровые метки**, которые ОС накладывает на элементы – ваш сайт должен правильно обозначать элементы, чтобы система могла их идентифицировать). Протестировать полностью голосовое управление сложнее, но можно мысленно проверить: “если я назову этот элемент голосом, понятно ли какой он?”.
* **Специальные устройства ввода.** К ним относятся переключатели (sip-and-puff, одноместные кнопки), альтернативные клавиатуры, трекболы и прочее. Обычно они эмулируют базовые команды клавиатуры/мыши, поэтому ключевое – поддержка управления с клавиатуры и понятный фокус. Если ваш сайт проходит тесты на клавиатурную доступность, он, как правило, будет доступен и для подобных устройств.

**Советы по эффективному тестированию:**

1. **Комбинируйте инструменты.** Начните с автоматических сканеров (валидаторы, WAVE, axe) – исправьте найденные ошибки. Затем переходите к ручному тестированию: клавиатура, скринридеры, лупа. Такой поэтапный подход закроет максимум проблем.
2. **Документируйте обнаруженные проблемы.** В процессе тестирования фиксируйте каждое нарушение (скриншоты экрана со скринридером или видео взаимодействия помогут разработчикам воспроизвести ситуацию). Указывайте, каким инструментом или технологией выявлена проблема – так легче понять ее природу.
3. **Тестируйте в разных комбинациях.** Поведение может отличаться в зависимости от браузера и скринридера. Если обнаружен странный баг только в одном сочетании (например, VoiceOver + Chrome), попробуйте повторить в другом (VoiceOver + Safari). Это поможет понять, проблема в коде сайта или это баг ассистивной технологии.
4. **Используйте эмуляторы при необходимости.** Если нет возможности физически тестировать на всех устройствах, есть онлайн-сервисы, предоставляющие доступ к скринридерам. Например, **BrowserStack** позволяет запускать различные ОС/браузеры со скринридерами, а сервис **Assistiv Labs** эмулирует удалённое тестирование популярных скринридеров. Это может быть полезно для быстрого ознакомления с поведением сайта под VoiceOver или TalkBack, если у вас нет iPhone/Android под рукой.
5. **Привлекайте реальных пользователей.** Тесты разработчиков не заменят опыта людей, постоянно использующих вспомогательные технологии. После внутренней проверки постарайтесь провести юзабилити-тестирование с участием людей с инвалидностью. Они могут выявить неочевидные барьеры и подсказать, насколько комфортно пользоваться сайтом на практике.

Используя весь этот арсенал инструментов – от валидаторов до скринридеров – вы сможете всесторонне проверить веб-сайт на соответствие стандартам **WCAG 2.1** и убедиться, что контент доступен для всех пользователей. Помните, цель тестирования доступности не только в соблюдении требований, но и в том, чтобы сделать пользовательский опыт лучше для людей с разными возможностями. Хорошего тестирования!

**Источники и полезные ссылки:**

* WebAIM WAVE – [онлайн-валидатор доступности](https://wave.webaim.org/) и [расширения браузера](https://wave.webaim.org/extension/) . Помогает находить ошибки по WCAG, визуализируя их на странице.
* Перевод статьи Николаса Чана “Guide to Accessibility Tools” – подробный обзор инструментов доступности на Хабр.
* *Пять лучших инструментов автоматического тестирования доступности* – обзор расширений (Wave, Tenon, Lighthouse, axe, Siteimprove).
* *Руководство BBC* по тестированию с вспомогательными технологиями – советы для практического тестирования (шорткаты скринридеров и т.д.).
