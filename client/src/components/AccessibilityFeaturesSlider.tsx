import { useState, useEffect } from "react";
import slyde1Image from "@assets/Slyde1_1751518088264.png";
import slyde2Image from "@assets/Slyde2_1751518092093.png";
import slyde3Image from "@assets/Slyde3_1751518094773.png";
import slyde4Image from "@assets/Slyde4_1751518100860.png";
import slyde5Image from "@assets/Slyde5_1751518104614.png";

const slides = [
  {
    id: 1,
    illustration: (
      <img 
        src={slyde1Image} 
        alt="–ß–µ–ª–æ–≤–µ–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –≥–ª–∞–∑–∞, —Ç–µ–∫—Å—Ç–∞ –∏ —É—Ö–∞"
        className="w-full h-full object-contain"
      />
    ),
    title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏",
    description: "–ó–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å —á–∏—Ç–∞—Ç—å –º–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç? –£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –¥–æ 150%."
  },
  {
    id: 2,
    illustration: (
      <img 
        src={slyde2Image} 
        alt="–ß–µ–ª–æ–≤–µ–∫ —Å –Ω–∞—É—à–Ω–∏–∫–∞–º–∏ —Å–ª—É—à–∞–µ—Ç –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞"
        className="w-full h-full object-contain"
      />
    ),
    title: "–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞",
    description: "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ —Å–ª—É—Ö? –í—ã–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è."
  },
  {
    id: 3,
    illustration: (
      <img 
        src={slyde3Image} 
        alt="–ß–µ–ª–æ–≤–µ–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å –ª—É–ø–æ–π –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏"
        className="w-full h-full object-contain"
      />
    ),
    title: "–í–∏–∑—É–∞–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è",
    description: "–ü—Ä–æ–±–ª–µ–º—ã —Å –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ–º —Ü–≤–µ—Ç–æ–≤? –í–∫–ª—é—á–∏—Ç–µ —á–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Ä–µ–∂–∏–º –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."
  },
  {
    id: 4,
    illustration: (
      <img 
        src={slyde4Image} 
        alt="–ß–µ–ª–æ–≤–µ–∫ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ —Å –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è–º–∏"
        className="w-full h-full object-contain"
      />
    ),
    title: "–¢–µ–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",
    description: "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —è—Ä–∫–æ–º—É —Å–≤–µ—Ç—É? –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É."
  },
  {
    id: 5,
    illustration: (
      <img 
        src={slyde5Image} 
        alt="–ß–µ–ª–æ–≤–µ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª–∞–≤–∏—à—É Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"
        className="w-full h-full object-contain"
      />
    ),
    title: "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è",
    description: "–£–¥–æ–±–Ω–µ–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π? –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Tab –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å–∞–π—Ç—É."
  }
];

export default function AccessibilityFeaturesSlider() {
  const [currentSlide, setCurrentSlide] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentSlide((prev) => (prev + 1) % slides.length);
    }, 5000);

    return () => clearInterval(interval);
  }, []);

  const handleSlideChange = (index: number) => {
    setCurrentSlide(index);
  };

  const handleTryClick = () => {
    const accessibilityButton = document.querySelector('[aria-label="–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"]') as HTMLButtonElement;
    if (accessibilityButton) {
      accessibilityButton.click();
    }
  };

  return (
    <section className="relative text-white overflow-hidden" aria-labelledby="accessibility-features">
      {/* Background with same gradient as hero */}
      <div className="absolute inset-0 bg-gradient-to-br from-blue-600 via-cyan-600 to-teal-500 dark:from-purple-900 dark:via-blue-900 dark:to-indigo-900"></div>
      
      {/* Accessibility symbols pattern overlay */}
      <div className="absolute inset-0 opacity-10">
        <div className="grid grid-cols-8 gap-8 transform rotate-12 scale-110">
          {Array.from({ length: 48 }).map((_, i) => (
            <div key={i} className="flex items-center justify-center text-6xl text-white/20">
              {i % 4 === 0 && "‚ôø"}
              {i % 4 === 1 && "üëÅ"}
              {i % 4 === 2 && "üîä"}
              {i % 4 === 3 && "‚å®"}
            </div>
          ))}
        </div>
      </div>

      <div className="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
        {/* Header */}
        <div className="text-center mb-4">
          <h2 id="accessibility-features" className="text-2xl md:text-3xl font-bold mb-2">
            –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –∑–∞–±–æ—Ç–∞ –æ –∫–∞–∂–¥–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          </h2>
          <p className="text-base md:text-lg opacity-90">
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∞–π—Ç –ø–æ–¥ —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
          </p>
        </div>

        {/* Continuous Ribbon Slider */}
        <div className="bg-white/10 backdrop-blur-sm rounded-2xl border border-white/20 p-4 md:p-6 mb-4">
          <div className="relative h-[400px] overflow-hidden rounded-xl">
            {/* Previous slide (left side) */}
            <div className="absolute left-0 top-0 w-3/5 h-full ribbon-slide ribbon-slide-prev">
              <div className="w-full h-full flex items-center justify-center">
                {slides[(currentSlide - 1 + slides.length) % slides.length].illustration}
              </div>
            </div>
            
            {/* Next slide (right side) */}
            <div className="absolute right-0 top-0 w-3/5 h-full ribbon-slide ribbon-slide-next">
              <div className="w-full h-full flex items-center justify-center">
                {slides[(currentSlide + 1) % slides.length].illustration}
              </div>
            </div>
            
            {/* Current slide (center) */}
            <div className="absolute inset-0 ribbon-slide ribbon-slide-center">
              <div className="w-full h-full flex items-center justify-center">
                {slides[currentSlide].illustration}
              </div>
              
              {/* Content overlay at bottom with button area */}
              <div className="absolute inset-0 z-30 flex flex-col justify-end p-8 bg-gradient-to-t from-black/60 via-transparent to-transparent">
                <div className="flex flex-col md:flex-row md:items-end md:justify-between gap-4">
                  {/* Text content */}
                  <div className="flex-1">
                    <h3 className="text-2xl md:text-3xl font-bold mb-4 text-white drop-shadow-lg">
                      {slides[currentSlide].title}
                    </h3>
                    <p className="text-lg md:text-xl text-white/90 leading-relaxed drop-shadow-lg">
                      {slides[currentSlide].description}
                    </p>
                  </div>
                  
                  {/* Static Button Area */}
                  <div className="flex-shrink-0">
                    <button 
                      onClick={handleTryClick}
                      className="bg-white text-blue-600 hover:bg-blue-50 hover:text-blue-700 font-semibold py-3 px-6 rounded-lg shadow-lg transition-all transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-white/50"
                      aria-describedby="try-accessibility-desc"
                    >
                      –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Controls */}
        <div className="text-center">
          {/* Hidden description for accessibility */}
          <p id="try-accessibility-desc" className="sr-only">
            –û—Ç–∫—Ä–æ–µ—Ç –ø–∞–Ω–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
          </p>

          {/* Slide Indicators */}
          <div className="flex justify-center gap-2 mb-3">
            {slides.map((_, index) => (
              <button
                key={index}
                onClick={() => handleSlideChange(index)}
                className={`w-3 h-3 rounded-full transition-all ${
                  index === currentSlide 
                    ? 'bg-white' 
                    : 'bg-white/30 hover:bg-white/50'
                }`}
                aria-label={`–ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–∞–π–¥—É ${index + 1}: ${slides[index].title}`}
              />
            ))}
          </div>

          {/* Slide Counter */}
          <div className="text-center">
            <span className="text-sm opacity-75">
              {currentSlide + 1} –∏–∑ {slides.length}
            </span>
          </div>
        </div>
      </div>
    </section>
  );
}